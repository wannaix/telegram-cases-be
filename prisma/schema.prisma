// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  telegramId  String   @unique
  username    String?
  firstName   String?
  lastName    String?
  languageCode String? @default("en")
  isPremium   Boolean  @default(false)
  balance     Float    @default(0)
  totalSpent  Float    @default(0)
  totalWon    Float    @default(0)
  isBlocked   Boolean  @default(false)
  isAdmin     Boolean  @default(false)
  referralLinkId String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  caseOpenings CaseOpening[]
  inventory    InventoryItem[]
  transactions Transaction[]
  usedPromocodes UserPromocode[]
  referralLink ReferralLink? @relation(fields: [referralLinkId], references: [id])
  
  @@map("users")
}

model Case {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  imageBase64 String?  // Base64 encoded image data
  isActive    Boolean  @default(true)
  isLocked    Boolean  @default(false)
  
  // Unlock conditions
  unlockLevel Int?
  unlockPrice Float?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  items        CaseItem[]
  openings     CaseOpening[]
  
  @@map("cases")
}

model Item {
  id          String     @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  rarity      ItemRarity
  type        ItemType
  price       Float
  
  // Partners NFT fields
  partnersNftId    String?  @unique // ID NFT от partners API
  estimatedPrice   Float?   // Примерная цена NFT
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  caseItems    CaseItem[]
  inventory    InventoryItem[]
  
  @@map("items")
}

model CaseItem {
  id          String  @id @default(cuid())
  caseId      String
  itemId      String
  dropChance  Float   // Вероятность выпадения в процентах (0-100)
  
  // Relations
  case        Case    @relation(fields: [caseId], references: [id], onDelete: Cascade)
  item        Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  
  @@unique([caseId, itemId])
  @@map("case_items")
}

model CaseOpening {
  id        String   @id @default(cuid())
  userId    String
  caseId    String
  itemId    String
  pricePaid Float
  itemValue Float
  profit    Float    // itemValue - pricePaid
  
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  case      Case     @relation(fields: [caseId], references: [id])
  
  @@map("case_openings")
}

model InventoryItem {
  id        String   @id @default(cuid())
  userId    String
  itemId    String
  quantity  Int      @default(1)
  
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  
  @@unique([userId, itemId])
  @@map("inventory_items")
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  type        TransactionType
  amount      Float
  description String?
  
  createdAt   DateTime        @default(now())
  
  // Relations
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("transactions")
}

// Enums
enum ItemRarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
  ANCIENT
  CONTRABAND
}

enum ItemType {
  WEAPON
  KNIFE
  GLOVES
  STICKER
  GRAFFITI
  MUSIC_KIT
  CASE
  KEY
}

enum ItemCondition {
  FACTORY_NEW
  MINIMAL_WEAR
  FIELD_TESTED
  WELL_WORN
  BATTLE_SCARRED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  CASE_OPENING
  ITEM_SALE
  REFUND
  ADMIN_ADJUSTMENT
  PROMOCODE_BONUS
}

// Админские модели

model Promocode {
  id          String   @id @default(cuid())
  code        String   @unique
  description String?
  bonusAmount Float
  bonusPercent Float?
  maxUses     Int?
  usedCount   Int      @default(0)
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userPromocodes UserPromocode[]
  
  @@map("promocodes")
}

model UserPromocode {
  id          String   @id @default(cuid())
  userId      String
  promocodeId String
  bonusAmount Float
  
  createdAt   DateTime @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  promocode   Promocode @relation(fields: [promocodeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, promocodeId])
  @@map("user_promocodes")
}

model ReferralLink {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String?
  description String?
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users       User[]
  deposits    ReferralDeposit[]
  
  @@map("referral_links")
}

model ReferralDeposit {
  id             String   @id @default(cuid())
  referralLinkId String
  userId         String
  amount         Float
  
  createdAt      DateTime @default(now())
  
  // Relations
  referralLink   ReferralLink @relation(fields: [referralLinkId], references: [id], onDelete: Cascade)
  
  @@map("referral_deposits")
}

model Gift {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  price       Float
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("gifts")
}

model AdminLog {
  id          String   @id @default(cuid())
  adminId     String
  action      String
  target      String?
  description String?
  metadata    Json?
  
  createdAt   DateTime @default(now())
  
  @@map("admin_logs")
}