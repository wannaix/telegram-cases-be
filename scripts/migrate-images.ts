import fs from 'fs/promises';
import path from 'path';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function migrateImages() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
  
  const oldDir = path.join(process.cwd(), 'public', 'images', 'cases');
  const newDir = path.join(process.cwd(), 'uploads', 'cases');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await fs.mkdir(newDir, { recursive: true });
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å—Ç–∞—Ä–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const files = await fs.readdir(oldDir);
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`);
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    for (const file of files) {
      if (file.startsWith('.')) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
      
      const oldPath = path.join(oldDir, file);
      const newPath = path.join(newDir, file);
      
      try {
        await fs.copyFile(oldPath, newPath);
        console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${file}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ${file}:`, error);
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìä –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∫–µ–π—Å–æ–≤
    const cases = await prisma.case.findMany({
      where: {
        imageUrl: {
          contains: '/images/cases/'
        }
      }
    });
    
    for (const caseItem of cases) {
      if (caseItem.imageUrl) {
        const filename = path.basename(caseItem.imageUrl);
        const newUrl = `/uploads/cases/${filename}`;
        
        await prisma.case.update({
          where: { id: caseItem.id },
          data: { imageUrl: newUrl }
        });
        
        console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å –¥–ª—è –∫–µ–π—Å–∞ "${caseItem.name}": ${newUrl}`);
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    const items = await prisma.item.findMany({
      where: {
        imageUrl: {
          contains: '/images/'
        }
      }
    });
    
    console.log(`\nüì¶ –ù–∞–π–¥–µ–Ω–æ ${items.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π`);
    
    console.log('\n‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìå –§–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ /public/images/cases/ –≤ /uploads/cases/');
    console.log('üìå –ü—É—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateImages();